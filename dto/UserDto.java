package org.covn.dto;

import java.util.ArrayList;
import java.util.List;

import org.covn.model.db.Address;
import org.covn.model.db.EmailAddress;
import org.covn.model.db.ExternalIdentifier;
import org.covn.model.db.PhoneNumber;
import org.covn.model.db.UserPhoto;
import org.covn.model.db.Users;

/** UserDto has common fields for all users (both patients and health professionals)
 * Superclass for HealthProDto and PatientDto
 * (Previously called RegisterDto)
 * 
 */

public class UserDto{

	private Users user;
	
	// ls name fields are in Latin English-26 character script
	// in Release1, only latin script names are supported
//	private String lsTitle; // optional, eg. Mr, Ms, Miss, Mrs, Dr, Prof or regional variations. CHECK CONSTRAINT
//	private String lsFirstName; // required
//	private String lsMiddleName; // optional
//	private String lsLastName; // required
//	private String lsSuffix; // optional, e.g. I, II, III, Sr, Jr, etc. Not for academic degrees. 
//	private String lsDegrees; // optional. Usually Masters and above degrees. But sometimes, undergraduate degrees are entered for some health professionals 
//	private String lsMaidenName; // optional
//	private String lsDisplayName; // optional. if blank, use (firstName + " " + lastName)
//	private String lsAliasName1; // optional. If the user has an alias, fill it here
//	private String lsAliasName2; // optional. If the user has another alias, fill it here
//
//	// OPTIONAL: ns name fields are in native character script including extended Latin characters (e.g. European languages with accent marks)
//	// Native script names will be supported in Release2
//	private String nsTitle; 
//	private String nsFirstName; 
//	private String nsMiddleName; 
//	private String nsLastName; 
//	private String nsSuffix;  
//	private String nsDegrees;
//	private String nsMaidenName; 
//	private String nsDisplayName;
//	private String nsAliasName1; 
//	private String nsAliasName2; 
	
	/**
	* standardName is autogenerated: it is the standardized full name of the user in the 
	* machine readable passport official travel document line 3 format (even if the user 
	* does not have a passport) - Uppercase English letters and spaces only. Max length 
	* is 30 characters. Surname, followed by two spaces, followed by given names. If there 
	* are multiple given (first and middle) names or multiple surnames, they are separated 
	* by single spaces. If longer than 30 characters, then trim given names to fit.
	*  
	*/
	//private String standardName; 
	
	/** either dob or ageInYrs must be present. (UI design note: dob is preferred)
	 * 
	 */
	//private Date dob; // date of birth
	//private int ageInYrs; // approximate age in years, when date of birth is not known
	
	/** gender, required. also known as 'administrative gender'. What gender does the user identify 
	* in a socio-cultural context. CHECK CONSTRAINT.
	* Allowed values are based on what is legally recognized in a jurisdiction.
	* e.g. 	US: male, female, other.
	* 		India: male, female, third gender
	* We will go with the values of male, female, and other in the database, and modify the display 
	* values in i18n for different jurisdictions.
	*/
	//private AdminGender adminGender; 
	
	/**
	 * Optional, the biological sex of an individual. May be different from their gender.
	 * It is sometimes known as 'birth sex'. 
	 * Defined by healthcare professionals, not legal/jurisdiction authorities.
	 * The list of values is very long and not standardized and undergoes constant change
	 * (ref: look up a value set based on SNOMED CT or an HL7 value set), 
	 * so we may leave it blank in release1 and address it in release2.
	 */
	//private BiologicalSex biologicalSex; 

	// each user must have at least 1 external id
	private List<ExternalIdentifier> externalIdList = new ArrayList<ExternalIdentifier>();
	
	// each user must have at least 1 address
	private List<Address> addressList = new ArrayList<Address>();

	// each user much have at least 1 phone number. 
	// Patients must have at least 1 cell phone (to receive OTP) as a primary or secondary user
	private List<PhoneNumber> phoneNumberList = new ArrayList<PhoneNumber>();
	
	// health professionals must have at least 1 email address, but email is optional for patients
	private List<EmailAddress> emailAddressList = new ArrayList<EmailAddress>();

	// users must have at least 1 photo
	private List<UserPhoto> userPhotoList = new ArrayList<UserPhoto>();

	public Users getUser() {
		return user;
	}

	public void setUser(Users user) {
		this.user = user;
	}

	public List<ExternalIdentifier> getExternalIdList() {
		return externalIdList;
	}

	public void setExternalIdList(List<ExternalIdentifier> externalIdList) {
		this.externalIdList = externalIdList;
	}

	public List<Address> getAddressList() {
		return addressList;
	}

	public void setAddressList(List<Address> addressList) {
		this.addressList = addressList;
	}

	public List<PhoneNumber> getPhoneNumberList() {
		return phoneNumberList;
	}

	public void setPhoneNumberList(List<PhoneNumber> phoneNumberList) {
		this.phoneNumberList = phoneNumberList;
	}

	public List<EmailAddress> getEmailAddressList() {
		return emailAddressList;
	}

	public void setEmailAddressList(List<EmailAddress> emailAddressList) {
		this.emailAddressList = emailAddressList;
	}

	public List<UserPhoto> getUserPhotoList() {
		return userPhotoList;
	}

	public void setUserPhotoList(List<UserPhoto> userPhotoList) {
		this.userPhotoList = userPhotoList;
	}


	
	
	
	
}
